package db

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"log"
	"os"
	"reflect"

	"github.com/k0kubun/pp"
	"github.com/ulikunitz/xz/lzma"
)

type osr struct {
	Gamemode         uint8
	OsuVer           int32
	MD5              string
	PlayerName       string
	BmChecksum       string
	Hit300s          uint16
	Hit100s          uint16
	Hit50s           uint16
	HitGekis         uint16
	HitKatus         uint16
	HitMisses        uint16
	Score            int32
	MaxCombo         uint16
	IsPerfect        bool
	Mods             int32
	Lifebar          string
	DateTime         int64
	LengthReplayData int32
	ReplayData       []uint8
	ScoreID          int64
}

//WriteOSR does the write replay magic
func WriteOSR() error {

	var OsrStruct = osr{
		Gamemode:         0,
		OsuVer:           20181118,
		MD5:              "f95ecf30a8ee59c9f862c48fe751ec62",
		PlayerName:       "BlackShark",
		BmChecksum:       "1c3721d6a3fc6add0294aad40b515536",
		Hit300s:          2,
		Hit100s:          1,
		Hit50s:           0,
		HitGekis:         0,
		HitKatus:         0,
		HitMisses:        3,
		Score:            958,
		MaxCombo:         3,
		IsPerfect:        false,
		Mods:             0,
		Lifebar:          "",
		DateTime:         636784625031727219,
		LengthReplayData: 1955,
		ReplayData:       []uint8(compressToLZMA("0|256|-500|0,-1|256|-500|0,1|122.6667|117.7778|5,0|122.6667|117.7778|5,0|122.6667|117.7778|5,0|122.6667|117.7778|0,13|122.6667|117.7778|0,19|122.6667|117.7778|0,17|122.6667|117.7778|0,2|122.6667|117.7778|10,12|122.6667|117.7778|10,19|122.6667|117.7778|10,17|122.6667|117.7778|10,15|122.6667|117.7778|10,18|122.6667|117.7778|10,3|122.6667|117.7778|0,14|122.6667|117.7778|0,14|122.6667|117.7778|0,20|122.6667|117.7778|0,16|122.6667|117.7778|0,14|122.6667|117.7778|0,19|122.6667|117.7778|0,17|122.6667|117.7778|0,14|122.6667|117.7778|0,10|122.6667|117.7778|5,9|122.6667|117.7778|5,17|122.6667|117.7778|5,14|122.6667|117.7778|5,19|122.6667|117.7778|5,17|122.6667|117.7778|5,4|122.6667|117.7778|0,10|122.6667|117.7778|0,19|122.6667|117.7778|0,18|122.6667|117.7778|0,14|122.6667|117.7778|0,18|122.6667|117.7778|0,1|122.6667|117.7778|10,16|122.6667|117.7778|10,15|122.6667|117.7778|10,18|122.6667|117.7778|10,18|122.6667|117.7778|10,13|122.6667|117.7778|10,5|122.6667|117.7778|0,15|122.6667|117.7778|0,17|122.6667|117.7778|0,14|122.6667|117.7778|0,18|122.6667|117.7778|0,18|122.6667|117.7778|0,13|122.6667|117.7778|0,19|122.6667|117.7778|0,4|122.6667|117.7778|5,15|121.7778|117.7778|5,14|119.1111|117.3333|5,17|116|116.8889|5,18|112.4444|116.8889|5,14|108.8889|116.8889|0,19|105.3333|116.8889|0,17|103.5556|116.8889|0,13|102.6667|117.3333|0,20|102.2222|118.2222|0,16|101.7778|118.2222|0,13|101.7778|118.6667|10,2|101.7778|119.1111|10,18|104|120.8889|10,17|110.2222|121.7778|10,15|110.6667|121.7778|10,18|110.6667|121.7778|10,17|110.6667|121.7778|0,14|110.6667|121.7778|0,19|110.6667|121.7778|0,16|110.6667|121.7778|0,16|110.6667|121.7778|0,18|110.6667|121.7778|0,17|110.6667|121.7778|0,14|110.6667|121.7778|0,19|110.6667|121.7778|0,17|110.6667|121.7778|0,3|110.6667|120.8889|5,12|110.6667|119.5556|5,18|113.3333|116.8889|5,17|116.8889|115.5556|5,15|118.6667|115.5556|5,12|119.1111|115.5556|0,6|119.1111|115.5556|0,18|119.1111|115.5556|0,13|119.1111|115.5556|0,19|119.1111|115.5556|0,17|119.1111|115.5556|0,15|119.1111|115.5556|0,18|119.1111|115.5556|0,17|119.1111|115.5556|0,15|119.1111|115.5556|0,18|119.1111|115.5556|0,17|119.1111|115.5556|0,14|119.1111|115.5556|0,19|119.1111|115.5556|0,17|119.5556|115.5556|0,15|119.5556|115.5556|0,18|119.5556|115.5556|0,17|119.5556|115.5556|0,14|119.5556|115.5556|0,19|119.5556|115.5556|0,18|119.5556|115.5556|0,14|120.8889|116|0,19|122.6667|116.4444|0,17|122.6667|116.4444|0,13|123.1111|116.8889|0,19|124.4444|118.6667|0,17|128|122.2222|0,15|133.3333|126.6667|0,18|139.1111|131.5556|0,17|144.8889|136.4444|0,15|150.6667|142.2222|0,19|156.8889|148.8889|0,17|163.1111|155.5556|0,14|168.4444|162.6667|0,18|174.6667|170.6667|0,17|181.7778|179.5556|0,15|188.8889|188.8889|0,19|195.5556|196.8889|0,16|201.7778|203.5556|0,15|207.5556|209.3333|0,18|212.4444|212.8889|0,17|216|214.2222|0,15|218.6667|214.6667|0,19|220.8889|213.3333|0,16|221.7778|211.1111|0,14|221.7778|208.4444|0,19|221.7778|204.8889|0,17|221.7778|201.3333|0,16|221.7778|196.8889|0,17|221.3333|192.4444|0,18|220|188|0,14|218.6667|184|0,19|217.7778|180.8889|0,15|217.7778|178.6667|0,15|217.3333|176|0,19|216.8889|172.8889|0,17|216|169.7778|0,15|215.1111|166.6667|0,19|214.2222|164.8889|0,16|213.7778|164.4444|0,14|213.3333|164|0,20|213.3333|164|0,16|213.3333|164|0,14|212.4444|163.5556|0,19|210.2222|162.6667|0,18|207.5556|160.8889|0,14|204.8889|159.5556|0,18|203.1111|157.7778|0,17|201.7778|156.8889|0,14|201.3333|156|0,19|200.8889|155.5556|0,17|200.8889|155.1111|0,14|200.8889|154.6667|0,19|200.8889|154.2222|0,16|200.8889|153.3333|0,15|200.8889|152.8889|0,19|200.8889|151.5556|0,17|201.3333|150.6667|0,15|201.7778|149.3333|0,19|202.2222|148|0,16|202.6667|146.6667|0,13|203.1111|145.3333|5,1|203.1111|145.3333|5,19|204|144|5,18|205.3333|142.2222|5,15|207.1111|140.4444|5,17|209.3333|138.6667|5,17|212.4444|136.8889|5,14|216|135.1111|5,19|220.4444|132.8889|5,16|224.8889|130.6667|5,16|229.7778|128.4444|5,18|234.2222|127.1111|5,17|237.7778|125.3333|5,16|240.8889|124|5,18|243.1111|123.1111|5,15|244.4444|122.6667|5,1|244.8889|122.2222|5,15|247.1111|121.7778|5,19|249.3333|120.8889|5,17|252.4444|120.4444|5,14|256.4445|120|5,19|261.3333|120|5,17|267.1111|120.8889|5,14|273.7778|122.2222|5,18|279.5555|124|5,18|285.3333|125.7778|5,14|290.2222|128|5,18|294.6667|130.2222|5,17|299.1111|132.4444|5,15|303.1111|135.1111|5,18|307.1111|138.2222|5,11|309.7778|140.8889|0,7|310.6667|141.7778|0,14|313.3333|145.3333|0,18|316.4445|150.2222|0,17|318.2222|156|0,0|318.2222|156.4444|0,15|320|164.4444|0,18|320.8889|174.2222|0,17|320.8889|186.6667|0,14|320.4445|198.6667|0,20|320|210.6667|0,17|319.5555|220|0,14|319.5555|225.7778|0,19|319.5555|230.6667|0,17|319.5555|233.7778|0,13|319.5555|236|0,19|319.5555|237.7778|0,17|319.1111|239.1111|0,14|319.1111|239.5556|0,19|319.1111|240|0,18|319.1111|240.4444|0,13|318.6667|240.8889|0,19|318.2222|241.7778|0,18|317.7778|243.1111|0,14|316.4445|244|0,19|315.1111|245.7778|0,5|314.2222|246.2222|5,10|313.3333|247.1111|5,16|311.1111|249.3333|5,18|308.8889|251.5556|5,16|306.6667|253.3333|5,16|304|254.6667|5,19|301.3333|256.4445|5,16|297.7778|257.3333|5,15|293.7778|258.2222|5,18|288.4445|258.6667|5,17|283.1111|259.1111|5,15|277.3333|259.1111|5,19|271.1111|259.1111|5,16|263.5555|258.6667|5,15|256|257.3333|5,18|247.5556|256.4445|5,17|240.4444|255.1111|5,12|235.5556|254.6667|5,4|233.3333|253.7778|5,18|227.1111|252.4444|5,14|221.3333|249.7778|5,2|220.8889|249.7778|5,15|215.5556|247.5556|5,18|212.8889|245.3333|5,9|212.8889|244|0,8|212.8889|242.2222|0,14|215.5556|236.4444|0,19|220|227.1111|0,18|224.8889|216.8889|0,13|228.4444|209.3333|0,19|232.8889|202.2222|0,17|236.8889|194.6667|0,15|239.5556|188.4444|0,19|241.7778|183.5556|0,16|244|179.5556|0,14|245.3333|176.8889|0,20|245.7778|175.5556|0,16|245.7778|175.5556|0,14|245.7778|175.5556|0,20|245.7778|175.5556|0,16|246.6667|175.5556|0,14|248.4444|174.6667|0,19|251.1111|173.7778|0,18|253.7778|173.3333|0,13|256.4445|173.3333|0,19|261.7778|174.6667|0,18|268.8889|176.4444|0,13|276.8889|178.2222|0,20|284.4445|179.5556|0,16|289.7778|180.4444|0,14|293.7778|180.8889|0,19|297.3333|181.3333|0,1|297.7778|181.3333|0,17|300.8889|181.7778|0,14|304|182.6667|0,18|307.1111|183.1111|0,17|310.2222|183.5556|0,14|312.8889|184|0,19|316.4445|184.4444|0,17|319.5555|184.8889|0,15|323.1111|185.3333|0,18|326.6667|185.7778|0,17|330.6667|185.7778|0,15|333.3333|185.7778|0,18|336|186.2222|0,18|338.2222|186.2222|0,13|340.8889|186.2222|0,19|342.2222|186.6667|0,18|343.1111|186.6667|0,13|343.1111|186.6667|0,19|343.5555|186.6667|0,17|343.5555|186.6667|0,8|343.5555|186.6667|0,6|344|186.6667|0,10|344|187.1111|5,9|344.4445|187.1111|5,18|344.8889|188.4444|5,15|345.7778|191.5556|5,18|346.2222|195.1111|5,16|347.1111|198.2222|5,15|347.1111|201.3333|5,18|347.1111|204.8889|5,17|346.2222|209.3333|5,16|344.8889|216|5,5|344.4445|217.3333|5,12|342.6667|223.5556|5,17|338.6667|232.8889|5,15|335.1111|241.3333|5,18|331.1111|249.3333|5,17|327.5555|255.5556|5,15|323.5555|260.4445|5,18|320.4445|264.4445|5,17|317.3333|267.5555|5,14|314.2222|270.2222|5,19|309.7778|273.3333|5,18|304|276|5,14|296.4445|279.1111|5,19|287.5555|282.2222|5,17|275.1111|285.7778|5,14|261.7778|289.3333|5,18|248.8889|292.8889|5,16|237.7778|296|5,3|235.5556|296.8889|0,13|228.4444|299.1111|0,18|221.3333|301.3333|0,12|217.3333|302.2222|0,6|216.4444|302.6667|0,14|212.8889|303.5555|0,18|209.7778|304|0,17|208|304.4445|0,14|206.6667|304.4445|0,19|205.7778|304.4445|0,17|205.7778|304.4445|0,14|205.3333|304.4445|0,20|205.3333|304.4445|0,16|205.3333|304.4445|0,14|205.3333|304.4445|0,19|204.8889|304|0,18|204.8889|303.5555|0,13|204.8889|303.5555|0,19|204.8889|303.1111|0,17|204.8889|303.1111|0,14|204.4444|302.6667|0,19|204|302.2222|0,17|203.1111|301.3333|0,15|201.3333|299.5555|0,9|200|298.6667|5,9|198.6667|297.7778|5,18|195.1111|294.6667|5,13|192|290.6667|5,20|188.4444|284.8889|5,17|185.3333|279.1111|5,14|182.2222|272.8889|5,19|178.6667|266.6667|5,16|175.5556|260.4445|5,15|172.4444|254.2222|5,18|169.7778|248|5,17|167.5556|240.8889|5,15|166.2222|233.7778|5,19|164.8889|225.7778|5,17|164.4444|216.8889|5,15|164.4444|208.8889|5,17|164.4444|201.7778|5,18|165.3333|192.8889|5,7|166.2222|188.8889|5,7|168|184|5,19|172.8889|176|5,10|176.4444|171.1111|5,7|180|168|5,14|189.3333|161.3333|5,18|203.1111|156|5,17|219.1111|152.4444|5,14|235.5556|151.1111|5,19|254.2222|152|5,17|271.5555|157.3333|5,7|279.5555|160.8889|0,7|286.2222|165.7778|0,19|298.6667|178.6667|0,18|305.3333|196|0,14|304|216.4444|0,18|292.4445|235.1111|0,17|271.1111|251.5556|0,15|248.8889|262.2222|0,18|227.1111|268.4445|0,17|210.2222|271.1111|0,15|197.7778|271.5555|0,18|191.5556|269.7778|0,17|190.6667|268.4445|0,14|190.6667|267.5555|0,20|192.4444|265.3333|0,17|194.2222|262.6667|0,13|194.6667|260.4445|0,19|195.1111|258.6667|0,17|195.1111|258.2222|0,14|195.1111|258.2222|0,19|195.1111|258.2222|0,18|195.1111|257.7778|0,13|195.1111|256|0,19|193.7778|253.3333|0,17|192.8889|249.7778|0,15|191.5556|245.3333|0,19|190.2222|240.4444|0,16|189.7778|235.5556|0,15|189.3333|230.2222|0,18|188.8889|225.7778|0,18|188.8889|222.2222|0,13|188.8889|218.2222|0,19|188.8889|215.1111|0,18|188.8889|212.8889|0,13|188.8889|212|0,19|188.8889|211.5556|0,18|188.8889|211.5556|0,13|188.8889|211.5556|0,19|188.8889|211.5556|0,15|188.8889|211.5556|0,16|188.8889|211.5556|0,19|188.8889|211.5556|0,18|188.8889|211.5556|0,13|188.8889|211.5556|0,19|188.8889|211.5556|0,18|188.8889|211.5556|0,13|188.8889|209.7778|0,20|188.4444|208|0,16|188.4444|206.6667|0,-12345|0|0|1400993,")),
		//ReplayData: decompressLZMA(),
		ScoreID: 0,
	}

	file, err := os.Create("test.osr")
	defer file.Close()
	if err != nil {
		pp.Println("Could not create osr file")
		return nil
	}
	replayWriter := bufio.NewWriter(file)

	v := reflect.ValueOf(OsrStruct)
	values := make([]interface{}, v.NumField())
	for i := 0; i < v.NumField(); i++ {
		values[i] = v.Field(i).Interface()
		switch v.Field(i).Kind() {
		case reflect.String:
			replayWriter.WriteByte(0x0B)
			replayWriter.WriteByte(byte(len(v.Field(i).String())))
			replayWriter.WriteString(v.Field(i).String())
		case reflect.Uint8:
			writeUint8(replayWriter, uint8(v.Field(i).Uint()))
		case reflect.Uint16:
			writeUint16(replayWriter, uint16(v.Field(i).Uint()))
		case reflect.Int32:
			writeInt32(replayWriter, int32(v.Field(i).Int()))
		case reflect.Bool:
			writeBool(replayWriter, v.Field(i).Bool())
		case reflect.Int64:
			writeInt64(replayWriter, v.Field(i).Int())
		case reflect.Slice:
			replayWriter.Write(v.Field(i).Bytes())
		default:
			log.Fatalln("Unsupported struct type!")
		}

	}
	replayWriter.Flush()

	return nil
}

func writeUint8(replayFile *bufio.Writer, number uint8) {
	binary.Write(replayFile, binary.LittleEndian, number)
}
func writeInt32(replayFile *bufio.Writer, number int32) {
	binary.Write(replayFile, binary.LittleEndian, number)
}
func writeUint16(replayFile *bufio.Writer, number uint16) {
	binary.Write(replayFile, binary.LittleEndian, number)
}
func writeInt64(replayFile *bufio.Writer, number int64) {
	binary.Write(replayFile, binary.LittleEndian, number)
}
func writeBool(replayFile *bufio.Writer, number bool) {
	binary.Write(replayFile, binary.LittleEndian, number)
}

func compressToLZMA(input string) []byte {
	text := input
	var buf bytes.Buffer
	// compress text
	w, err := lzma.NewWriter(&buf)
	if err != nil {
		log.Fatalf("xz.NewWriter error %s", err)
	}
	if _, err := io.WriteString(w, text); err != nil {
		log.Fatalf("WriteString error %s", err)
	}
	if err := w.Close(); err != nil {
		log.Fatalf("w.Close error %s", err)
	}
	return buf.Bytes()
}

type array struct {
	data []byte
}

func decompressLZMA() []byte {
	file, err := os.Open("input.osr")
	if err != nil {
		log.Fatalln(err)
	}
	defer file.Close()
	file.Seek(0x8E, 0)
	var arr array
	arr.data = make([]byte, 0x7A3)
	file.Read(arr.data)
	fmt.Println(arr.data)
	return arr.data
}
